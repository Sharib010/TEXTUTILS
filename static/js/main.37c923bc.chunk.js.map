{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","title","type","href","onClick","toggleMode","id","htmlFor","TextForm","useState","myStyle","setMyStyle","text","setText","textBoxStyles","Object","assign","backgroundColor","color","style","heading","value","onChange","event","target","rows","newText","toUpperCase","showAlert","toLowerCase","fontStyle","fontWeight","split","length","Alert","alert","role","msg","defaultProps","aboutText","App","setMode","setAlert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.37c923bc.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n// import { Link } from 'react-router-dom'\nexport default function Navbar(props) {\n  \n  // const [darkStyle, setMyStyle] = useState({\n  //   color: \"black\",\n  //   backgroundColor: \"white\"\n  // });\n  // const [switchText, setSwitchText] = useState(\"Dark Mode\")\n\n  // const changeMode = ()=> {\n  //   if (darkStyle.color === \"black\") {\n  //     setMyStyle({\n  //       color: \"white\",\n  //       backgroundColor: \"black\",\n  //       border: '1px solid white'\n  //     })\n  //     setSwitchText(\"Light Mode\")\n  //   }\n  //   else {\n  //     setMyStyle({\n  //       color: \"black\",\n  //       backgroundColor: \"white\"\n  //     })\n  //     setSwitchText(\"Dark Mode\")\n  //   }\n  // };\n  return (\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n      <div className=\"container-fluid\">\n        <a className=\"navbar-brand\">{props.title}</a>\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span className=\"navbar-toggler-icon\" />\n        </button>\n        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n          <li className=\"nav-item\">\n            <a className=\"navbar-brand\" href=\"#\">Home</a>\n          </li>\n          {/* <li className=\"nav-item\">\n            <a className=\"navbar-brand\" href=\"/about\">{props.aboutText}</a>\n          </li> */}\n        </ul>\n        <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'} mx-5`}>\n          <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} id=\"flexSwitchCheckDefault\" />\n          <label htmlFor=\"\" >Dark mode</label>\n        </div>\n        {/* <form className=\"d-flex\">\n          <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\n          <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\n        </form> */}\n      </div>\n    </nav>\n  );\n}\n\nNavbar.propTypes = {\n  title: PropTypes.string.isRequired,\n  aboutText: PropTypes.string\n}\n\nNavbar.defaultProps = {\n  title: \"set title here \",\n  aboutText: \"set Text here\"\n};\n","import React,{useState} from 'react'\n\nexport default function TextForm(props) {\n    // function handelUpClick() {\n    //     console.log(\"uppercase case\")\n    // }\n    const handelUpClick = ()=> {\n        let newText = text.toUpperCase();\n        setText(newText);\n        props.showAlert(\"Converted to uppercase\",\"Success\");\n    }\n    const handelLoClick = ()=> {\n        let newText = text.toLowerCase();\n        setText(newText);\n           props.showAlert(\"Converted to lowercase\",\"Success\");\n    }\n    const handleClearClick = ()=> {\n        setText(\"\");\n        props.showAlert(\"all clear\",\"Success\");\n    }\n    const [myStyle, setMyStyle] = useState({});\n\n    const handleItalicClick = ()=> {\n    setMyStyle({\n        fontStyle: 'italic'\n    })\n    props.showAlert(\"Converted to Italic\",\"Success\");\n    }\n    const handleBoldClick= ()=>{\n        setMyStyle({\n            fontWeight: 'bold'\n        })\n        props.showAlert(\"Converted to bold\",\"Success\");\n    }\n\n    const handleOnChange = (event)=> {\n        // console.log(\"onchage\");\n        setText(event.target.value);\n    }\n    const [text, setText] = useState('');\n\n    let textBoxStyles = Object.assign({}, \n        myStyle,\n        {backgroundColor: props.mode==='dark'?'gray':'#cddaee', color: props.mode==='dark'?'white':'black'}\n        );\n    return ( \n        <>\n        <div className=\"container\" style={{color: props.mode==='dark'?'white':'black'}}>\n            <h1 className=\"my-3\">{props.heading}</h1>\n            <div className=\"mb-3\">\n                <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={textBoxStyles} id=\"myBox\" rows=\"3\"></textarea>\n            </div>\n            <button className=\"btn btn-primary mx-2 my-2\" onClick={handelUpClick}>Convert to Uppercase</button>\n            <button className=\"btn btn-primary mx-2 my-2\" onClick={handelLoClick}>Convert to Lowercase</button>\n            <button className=\"btn btn-primary mx-2 my-2\" onClick={handleClearClick}>Clear text</button>\n            <button className=\"btn btn-primary mx-2 my-2\" onClick={handleItalicClick}>Convert to Italic</button>\n            <button className=\"btn btn-primary mx-2 my-2\" onClick={handleBoldClick}>Convert to Bold</button>\n        </div>\n        <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'black'}}>\n            <h2>your text sammery</h2>\n            <p>{text.split(\" \").length - 1} words and {text.length} characters </p>\n            <p>{0.008 * text.split(\" \").length - 0.008} minutes to read</p>\n            <h2>Preview</h2>\n            <p>{text}</p>\n        </div>\n        </>\n    )\n}\n","import React from 'react'\n\nexport default function Alert(props) {\n    \n    return (\n        // props.alert && mtlb ki agr props.alert false hota hai to hi aale evulate hoga , agar fail hai to evalute nhi hoga aage .\n        props.alert && <div className=\"alert alert-success alert-dismissible fade show my-2\" role=\"alert\">\n            <strong>{props.alert.type}</strong>: {props.alert.msg}\n        </div>\n    )\n}\n","import './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#343a40';\n      showAlert(\"Dark Mode has been enabled\", \"Success\")\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = '#e2e9f4';\n      showAlert(\"light Mode has been enabled\", \"Success\")\n    }\n  }\n\n  return (\n    <>\n      {/* <Router> */}\n        <Navbar title=\"TextUtils\" aboutText=\"Learn react\" mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <div className=\"container\">\n          {/* <Switch>\n            <Router exact path=\"/about\">\n              <About />\n            </Router>\n            <Router exact path=\"/\"> */}\n              <TextForm heading=\"Enter the text to analyse\" showAlert={showAlert} mode={mode} />\n            {/* </Router> */}\n\n          {/* </Switch> */}\n        </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}